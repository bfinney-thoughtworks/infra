#!/bin/sh

set -e

if [[ -z `which terraform` ]]; then
  echo 'Error: Install terraform before running this script'
  exit 1
fi

if [[ -z `which aws` ]]; then
  echo 'Error: Install the AWS SDK before running this script'
  exit 1
fi

if [[ -z `terraform version | grep v0.10` ]]; then
  echo 'Error: This script should only be run with terraform v0.10'
  exit 1
fi

function usage() {
  echo 'Usage:\n\t ./tf <COMMAND> [<MODULE>]'
  echo
  echo 'COMMAND: Either `plan` or `apply`'
  echo 'MODULE: Either `base`, `apps`, `seeder`, or omit to do both `base` and `apps`'
  echo
  echo 'Examples:'
  echo '\t./tf plan base'
  echo '\t./tf apply'
  echo '\t./tf apply seeder'
  exit 1
}

BASE="--target module.base"
APPS="--target module.apps"
CORE="--target module.apps.module.core_app --target module.apps.random_id.session_secret"
MAILER="--target module.apps.module.mailer_app --target module.apps.aws_iam_user_policy.mailer_send_ses_email --target module.apps.aws_iam_user_policy.mailer_read_mail_bucket"
GROUP_MAILER="--target module.apps.module.group_mailer_app --target module.apps.aws_iam_user_policy.group_mailer_read_mail_bucket"
SEED="--target module.seeder"

function run_terraform() {
  # The sed command is to hide RSA keys/certs from stdout
  eval terraform $@ | sed '/-----BEGIN/,/-----END/d'
}

case "$1 $2" in
  "plan ")
    set -x
    run_terraform plan
    ;;
  "plan base")
    set -x
    run_terraform plan "$BASE"
    ;;
  "plan apps")
    set -x
    run_terraform plan "$APPS"
    ;;
  "plan seeder")
    set -x
    run_terraform plan "$SEED"
    ;;

  "apply ")
    set -x
    run_terraform apply "$BASE"
    run_terraform apply "$CORE"
    run_terraform apply "$MAILER"
    run_terraform apply "$GROUP_MAILER"
    ;;
  "apply base")
    set -x
    run_terraform apply "$BASE"
    ;;
  "apply apps")
    set -x
    run_terraform apply "$CORE"
    run_terraform apply "$MAILER"
    run_terraform apply "$GROUP_MAILER"
    ;;
  "apply seeder")
    set -x
    run_terraform apply "$SEED"
    ;;
  *)
    usage
esac
